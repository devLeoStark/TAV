# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'quickscan.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import hashlib
import json
import os
import sys
import time
import win32api

import psutil as psutil
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import QFileDialog, QMessageBox

COLOR_BLACK = QColor(0, 0, 0)
COLOR_RED = QColor(255, 0, 0)
COLOR_GREEN = QColor(0, 120, 0)

SAFE = 1
VIRUS = 3


# virus_endswith_list = {
#     'exe', 'pif', 'application', 'gadget', 'msi', 'msp', 'com', 'scr', 'hta', 'cpl', 'msc', 'jar',
#     'bat', 'cmd', 'vb', 'vbs', 'vbe', 'js', 'jse', 'ws', 'wsf', 'wsc', 'wsh', 'ps1', 'ps1xml', 'ps2', 'ps2xml',
#     'psc1', 'psc2', 'msh', 'msh1', 'msh2', 'mshxml', 'msh1xml', 'msh2xml',
#     'scf', 'lnk', 'inf',
#     'reg',
#     'doc', 'xls', 'ppt', 'docm', 'dotm', 'xlsm', 'xltm', 'xlam', 'pptm', 'potm', 'ppam', 'ppsm', 'sldm',
#     'chm', 'hlp', 'sct', 'shb', 'shs',
# }


def hashFileMD5(file):
    md5 = hashlib.md5()
    try:
        with open(file, 'rb') as file:
            buffer = file.read()
            md5.update(buffer)
    except Exception as e:
        print(str(e))
    return md5.hexdigest()


def hashFileSHA256(file):
    sha256 = hashlib.sha256()
    try:
        with open(file, 'rb') as file:
            buffer = file.read()
            sha256.update(buffer)
    except Exception as e:
        print(str(e))
    return sha256.hexdigest()


def readJsonData(dataPath):
    with open(dataPath, encoding="utf8") as json_file:
        jsonData = json.load(json_file)
        return jsonData


def databaseChecking(filePath):
    level = 0
    fileToMD5 = hashFileMD5(filePath)
    fileToSHA256 = hashFileSHA256(filePath)
    database = readJsonData("database/data.json")
    for data in database:
        if fileToMD5 == data["md5"]:
            level = VIRUS
        elif fileToSHA256 == data["sha256"]:
            level = VIRUS
    return level


def getNumberOfFile(path):
    amount = 0
    for path, directories, files in os.walk(path):
        for file in files:
            amount += 1
    return amount


def checkPath(path):
    return os.path.exists(path)


class Ui_QuickScanLayout(QtWidgets.QMainWindow):

    def chooseFolder(self):
        print(str(self))
        try:
            folderName = QFileDialog.getExistingDirectory(
                None, "Choose Folder", "C:/", QFileDialog.ShowDirsOnly)
            self.folderPath.setText(folderName)
        except Exception as e:
            print(str(e))

    def scanning(self):
        try:
            if self.optionFullScan.isChecked():
                self.fullScan()
            else:
                if self.folderPath.text() == "":
                    QMessageBox.warning(
                        self, 'Alert', "Please choose your folder", QMessageBox.Yes, QMessageBox.Yes)
                elif not checkPath(self.folderPath.text()):
                    QMessageBox.warning(
                        self, 'Alert', "Folder is invalid", QMessageBox.Yes, QMessageBox.Yes)
                else:
                    path = self.folderPath.text()
                    self.clearScanLog()
                    self.specificScan(path)
        except Exception as e:
            print(e)

    def fullScan(self):
        self.showScanTool(True)
        drives = win32api.GetLogicalDriveStrings()
        print(drives)
        drives = drives.split('\000')[:-1]
        for drive in drives:
            self.specificScan(drive)
            while self.scanThread.isRunning():
                time.sleep()

    def specificScan(self, path):
        try:
            self.scanPath = path
            self.fileAmount = None
            self.showScanTool(True)
            self.isScanning(True)
            self.logBrowser.append("Scanning: " + path)
            self.logBrowser.append(
                "-----------------------*****-----------------------")
            self.logBrowserMalware.append("Scanning: " + path)
            self.logBrowserMalware.append(
                "-----------------------*****-----------------------")
            scanPath = path.replace('/', '\\')
            self.scanThread = ScanThread(parent=None, dir=scanPath)
            self.countfileThread = CountFileThread(parent=None, dir=scanPath)
            self.scanThread.start()
            self.countfileThread.start()
            self.scanThread.result.connect(self.loggingProcess)
            self.scanThread.fileScanned.connect(self.progressing)
            self.scanThread.done.connect(self.finishScan)
            self.countfileThread.amount.connect(self.amount)
            self.countfileThread.done.connect(self.finishCount)

        except Exception as e:
            print(e)

    def amount(self, amount):
        self.fileSize = amount

    def finishCount(self, bool):
        if bool == True:
            self.fileAmount = self.fileSize
            self.countfileThread.stop()

    def progressing(self, value):
        if self.fileAmount != None:
            self.progressBarScan.setMaximum(100)
            self.progressBarScan.setValue(int((value / self.fileAmount) * 100))
            self.lblStatus.setText("Scanning " + str(self.scanPath) + "   -   " + "Scanned: " + str(
                value) + "/" + str("{0:.0f}".format(self.fileAmount)))
        else:
            self.progressBarScan.setMaximum(0)
            self.lblStatus.setText(
                "Scanning " + str(self.scanPath) + "   -   " + "Analyzing...")

    def showScanTool(self, boolean):
        if boolean:
            self.btnCancel.setVisible(True)
            self.btnClearLog.setVisible(True)
            self.btnControl.setVisible(True)
            self.progressBarScan.setVisible(True)
            self.lblStatus.setVisible(True)
        else:
            self.btnCancel.setVisible(False)
            self.btnClearLog.setVisible(False)
            self.btnControl.setVisible(False)
            self.progressBarScan.setVisible(False)
            self.lblStatus.setVisible(False)

    def finishScan(self, bool):
        if bool:
            self.logBrowser.setTextColor(COLOR_BLACK)
            self.logBrowser.append("=== FINISHED ===")
            self.isScanning(False)
            self.scanThread.stop()

    def loggingProcess(self, result):
        guess = result[:1]
        path = result[1:]
        logLine = time.strftime("%Y/%m/%d - %H:%M:%S",
                                time.localtime()) + ":  " + path
        if int(guess) == VIRUS:
            self.logBrowser.setTextColor(COLOR_RED)
            self.logBrowserMalware.append(logLine)
        else:
            self.logBrowser.setTextColor(COLOR_GREEN)
        self.logBrowser.append(logLine)

        if self.scanThread.killed:
            self.logBrowser.setTextColor(COLOR_BLACK)
            self.logBrowser.append("=== CANCELLED ===")

    def enableSpecificScan(self, boolean):
        self.showScanTool(False)
        self.clearScanLog()
        if not boolean:
            self.folderPath.setVisible(False)
            self.btnChooseFolder.setVisible(False)
        else:
            self.folderPath.setVisible(True)
            self.btnChooseFolder.setVisible(True)

    def clearScanLog(self):
        self.logBrowser.clear()

    def cancelScan(self):
        self.scanThread.killed = True
        self.isScanning(False)
        self.scanThread.stop()

    def scanControl(self):
        if self.btnControl.isChecked():
            print('pausing')
            self.scanThread.pause = True
            self.btnControl.setText('Resume')
        else:
            print('resuming')
            self.scanThread.pause = False
            self.btnControl.setText('Pause')

    def isScanning(self, boolean):
        if boolean:
            self.btnChooseFolder.setDisabled(True)
            self.folderPath.setDisabled(True)
            self.btnScan.setDisabled(True)
            self.btnControl.setEnabled(True)
        else:
            self.btnChooseFolder.setEnabled(True)
            self.folderPath.setEnabled(True)
            self.btnScan.setEnabled(True)
            self.btnControl.setDisabled(True)

    def setupUi(self, QuickScanLayout):
        QuickScanLayout.setObjectName("QuickScanLayout")
        QuickScanLayout.resize(900, 600)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            QuickScanLayout.sizePolicy().hasHeightForWidth())
        QuickScanLayout.setSizePolicy(sizePolicy)
        QuickScanLayout.setMinimumSize(QtCore.QSize(900, 600))
        QuickScanLayout.setMaximumSize(QtCore.QSize(900, 600))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(
            "views/icons/vku_antivirus_logo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        QuickScanLayout.setWindowIcon(icon)
        QuickScanLayout.setStyleSheet("background-color: rgb(255, 255, 255);")
        QuickScanLayout.setIconSize(QtCore.QSize(30, 30))
        self.centralwidget = QtWidgets.QWidget(QuickScanLayout)
        self.centralwidget.setObjectName("centralwidget")
        self.lbl_icon = QtWidgets.QLabel(self.centralwidget)
        self.lbl_icon.setGeometry(QtCore.QRect(300, 0, 75, 75))
        self.lbl_icon.setText("")
        self.lbl_icon.setPixmap(QtGui.QPixmap("views/icons/quick.png"))
        self.lbl_icon.setScaledContents(True)
        self.lbl_icon.setObjectName("lbl_icon")
        self.lbl_name = QtWidgets.QLabel(self.centralwidget)
        self.lbl_name.setGeometry(QtCore.QRect(375, 0, 180, 75))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_name.setFont(font)
        self.lbl_name.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lbl_name.setStyleSheet("color: #c82032;")
        self.lbl_name.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.lbl_name.setObjectName("lbl_name")
        self.btnHome = QtWidgets.QPushButton(self.centralwidget)
        self.btnHome.setGeometry(QtCore.QRect(17, 13, 50, 50))
        self.btnHome.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btnHome.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(
            "views/icons/vku_antivirus_logo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnHome.setIcon(icon1)
        self.btnHome.setIconSize(QtCore.QSize(40, 40))
        self.btnHome.setObjectName("btnHome")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(20, 550, 861, 32))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.logToolBar = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.logToolBar.setContentsMargins(0, 0, 0, 0)
        self.logToolBar.setObjectName("logToolBar")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.progressBarScan = QtWidgets.QProgressBar(
            self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.progressBarScan.sizePolicy().hasHeightForWidth())
        self.progressBarScan.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(7)
        self.progressBarScan.setFont(font)
        self.progressBarScan.setStyleSheet("QProgressBar::chunk\n"
                                           "{\n"
                                           "    background-color: #f7961e;\n"
                                           "}\n"
                                           "QProgressBar\n"
                                           "{\n"
                                           "color: #374f8a;\n"
                                           "background-color : #ffc754;\n"
                                           "border : 1px;\n"
                                           "}\n"
                                           "")
        self.progressBarScan.setProperty("value", 24)
        self.progressBarScan.setObjectName("progressBarScan")
        self.progressBarScan.setAlignment(QtCore.Qt.AlignCenter)
        self.progressBarScan.setVisible(False)
        self.progressBarScan.setValue(0)
        self.verticalLayout_4.addWidget(self.progressBarScan)
        self.logToolBar.addLayout(self.verticalLayout_4)
        self.lblStatus = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.lblStatus.setFont(font)
        self.lblStatus.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lblStatus.setStyleSheet("color: #374f8a;")
        self.lblStatus.setAlignment(QtCore.Qt.AlignCenter)
        self.lblStatus.setObjectName("lblStatus")
        self.lblStatus.setVisible(False)
        self.verticalLayout_4.addWidget(self.lblStatus)
        self.btnControl = QtWidgets.QPushButton(
            self.horizontalLayoutWidget, clicked=lambda: self.scanControl())
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btnControl.setFont(font)
        self.btnControl.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btnControl.setStyleSheet("color: #c82032;")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("views/icons/pause_resume.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnControl.setIcon(icon3)
        self.btnControl.setObjectName("btnControl")
        self.btnControl.setVisible(False)
        self.btnControl.setCheckable(True)
        self.logToolBar.addWidget(self.btnControl)
        self.btnClearLog = QtWidgets.QPushButton(
            self.horizontalLayoutWidget, clicked=lambda: self.clearScanLog())
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btnClearLog.setFont(font)
        self.btnClearLog.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btnClearLog.setStyleSheet("color: #c82032;")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("views/icons/eraser_icon.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnClearLog.setIcon(icon2)
        self.btnClearLog.setObjectName("btnClearLog")
        self.btnClearLog.setVisible(False)
        self.logToolBar.addWidget(self.btnClearLog)
        self.btnCancel = QtWidgets.QPushButton(
            self.horizontalLayoutWidget, clicked=lambda: self.cancelScan())
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btnCancel.setFont(font)
        self.btnCancel.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btnCancel.setStyleSheet("color: #c82032;")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("views/icons/cancel_icon.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnCancel.setIcon(icon3)
        self.btnCancel.setObjectName("btnCancel")
        self.btnCancel.setVisible(False)
        self.logToolBar.addWidget(self.btnCancel)
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 100, 631, 78))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.optionFullScan = QtWidgets.QRadioButton(self.verticalLayoutWidget,
                                                     clicked=lambda: self.enableSpecificScan(False))
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.optionFullScan.sizePolicy().hasHeightForWidth())
        self.optionFullScan.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.optionFullScan.setFont(font)
        self.optionFullScan.setStyleSheet("color: #c82032;")
        self.optionFullScan.setChecked(True)
        self.optionFullScan.setObjectName("optionFullScan")
        self.verticalLayout.addWidget(self.optionFullScan)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.optionSpecificScan = QtWidgets.QRadioButton(self.verticalLayoutWidget,
                                                         clicked=lambda: self.enableSpecificScan(True))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.optionSpecificScan.setFont(font)
        self.optionSpecificScan.setStyleSheet("color: #c82032;")
        self.optionSpecificScan.setObjectName("optionSpecificScan")
        self.horizontalLayout_2.addWidget(self.optionSpecificScan)
        self.folderPath = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.folderPath.setEnabled(True)
        self.folderPath.setObjectName("folderPath")
        self.folderPath.setVisible(False)
        self.horizontalLayout_2.addWidget(self.folderPath)
        self.btnChooseFolder = QtWidgets.QPushButton(
            self.verticalLayoutWidget, clicked=lambda: self.chooseFolder())
        self.btnChooseFolder.setEnabled(True)
        self.btnChooseFolder.setStyleSheet("color: #c82032;")
        self.btnChooseFolder.setObjectName("btnChooseFolder")
        self.btnChooseFolder.setVisible(False)
        self.horizontalLayout_2.addWidget(self.btnChooseFolder)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.btnScan = QtWidgets.QPushButton(
            self.centralwidget, clicked=lambda: self.scanning())
        self.btnScan.setGeometry(QtCore.QRect(700, 95, 180, 75))
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.btnScan.sizePolicy().hasHeightForWidth())
        self.btnScan.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.btnScan.setFont(font)
        self.btnScan.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btnScan.setStyleSheet("color: #c82032;")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("views/icons/scan.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnScan.setIcon(icon4)
        self.btnScan.setIconSize(QtCore.QSize(40, 40))
        self.btnScan.setObjectName("btnScan")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(20, 180, 861, 341))
        self.tabWidget.setObjectName("tabWidget")
        self.tabAll = QtWidgets.QWidget()
        self.tabAll.setObjectName("tabAll")
        self.tabWidget.addTab(self.tabAll, "")
        self.scrollArea = QtWidgets.QScrollArea(self.tabAll)
        self.scrollArea.setGeometry(QtCore.QRect(0, 0, 865, 331))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 863, 329))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.logBrowser = QtWidgets.QTextBrowser(self.scrollAreaWidgetContents)
        self.logBrowser.setGeometry(QtCore.QRect(0, 0, 865, 331))
        self.logBrowser.setMaximumSize(QtCore.QSize(865, 360))
        self.logBrowser.setObjectName("logBrowser")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.tabMalware = QtWidgets.QWidget()
        self.tabMalware.setObjectName("tabMalware")
        self.scrollAreaMalware = QtWidgets.QScrollArea(self.tabMalware)
        self.scrollAreaMalware.setGeometry(QtCore.QRect(0, 0, 865, 331))
        self.scrollAreaMalware.setWidgetResizable(True)
        self.scrollAreaMalware.setObjectName("scrollAreaMalware")
        self.scrollAreaWidgetContentsMalware = QtWidgets.QWidget()
        self.scrollAreaWidgetContentsMalware.setGeometry(
            QtCore.QRect(0, 0, 863, 329))
        self.scrollAreaWidgetContentsMalware.setObjectName(
            "scrollAreaWidgetContentsMalware")
        self.logBrowserMalware = QtWidgets.QTextBrowser(
            self.scrollAreaWidgetContentsMalware)
        self.logBrowserMalware.setGeometry(QtCore.QRect(0, 0, 865, 331))
        self.logBrowserMalware.setMaximumSize(QtCore.QSize(865, 360))
        self.logBrowserMalware.setObjectName("logBrowserMalware")
        self.scrollAreaMalware.setWidget(self.scrollAreaWidgetContentsMalware)
        self.tabWidget.addTab(self.tabMalware, "")
        QuickScanLayout.setCentralWidget(self.centralwidget)

        self.retranslateUi(QuickScanLayout)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(QuickScanLayout)

    def retranslateUi(self, QuickScanLayout):
        _translate = QtCore.QCoreApplication.translate
        QuickScanLayout.setWindowTitle(
            _translate("QuickScanLayout", "Quick Scan"))
        self.lbl_name.setText(_translate("QuickScanLayout", "QUICK SCAN"))
        self.btnClearLog.setText(_translate("QuickScanLayout", "Clear log"))
        self.btnControl.setText(_translate("QuickScanLayout", "Pause"))
        self.btnCancel.setText(_translate("QuickScanLayout", "Cancel"))
        self.lblStatus.setText(_translate("QuickScanLayout", "Status"))
        self.logBrowser.setHtml(_translate("QuickScanLayout",
                                           "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                           "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                           "p, li { white-space: pre-wrap; }\n"
                                           "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
                                           "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.tabAll), _translate("QuickScanLayout", "All"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.tabMalware), _translate("QuickScanLayout", "Malware"))
        self.optionFullScan.setText(_translate("QuickScanLayout", "Full scan"))
        self.optionSpecificScan.setText(
            _translate("QuickScanLayout", "Specific scan"))
        self.btnChooseFolder.setText(_translate(
            "QuickScanLayout", "Choose folder"))
        self.btnScan.setText(_translate("QuickScanLayout", "SCAN"))


def processExists(file):
    return file in (p.name() for p in psutil.process_iter())


class ScanThread(QtCore.QThread):
    result = QtCore.pyqtSignal(str)
    fileScanned = QtCore.pyqtSignal(int)
    done = QtCore.pyqtSignal(bool)

    def __init__(self, parent=None, dir=None):
        super(ScanThread, self).__init__(parent)
        self.path = dir
        self.guess = SAFE
        self.scanned = 0
        self.pause = False
        self.killed = False
        self.isDone = False

    def run(self):
        try:
            print("starting scan thread...")
            scanPath = self.path.replace('/', '\\')
            for path, directories, files in os.walk(scanPath):
                for file in files:
                    if processExists(file):
                        print(file)
                    filePath = os.path.join(path, file)
                    self.scanned += 1
                    if databaseChecking(filePath) == VIRUS:
                        self.guess = VIRUS
                    self.result.emit(str(self.guess) + filePath)
                    self.fileScanned.emit(int((self.scanned)))

                    self.isDone = False
                    self.done.emit(self.isDone)

                    if self.pause:
                        while self.pause:
                            continue
                    elif self.killed:
                        return
                    else:
                        continue
            self.isDone = True
            self.done.emit(self.isDone)
        except Exception as e:
            print("specific scan catch")
            print(e)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)

    def stop(self):
        print("stopping scan thread...")
        self.terminate()


class CountFileThread(QtCore.QThread):

    amount = QtCore.pyqtSignal(float)
    done = QtCore.pyqtSignal(bool)

    def __init__(self, parent=None, dir=None):
        super(CountFileThread, self).__init__(parent)
        self.dir = dir
        self.isDone = False

    def run(self):
        print("starting count file thread")
        try:
            count = 0
            for path, directories, files in os.walk(self.dir):
                for file in files:
                    count += 1
                self.amount.emit(count)
                self.done.emit(self.isDone)
            self.isDone = True
            self.done.emit(self.isDone)

        except Exception as e:
            print("count thread catch")
            print(e)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)

    def stop(self):
        print("stopping count file thread...")
        self.terminate()
